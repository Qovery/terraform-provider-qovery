// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks_test

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	status "github.com/qovery/terraform-provider-qovery/internal/domain/status"
)

// DeploymentRepository is an autogenerated mock type for the Repository type
type DeploymentRepository struct {
	mock.Mock
}

type DeploymentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *DeploymentRepository) EXPECT() *DeploymentRepository_Expecter {
	return &DeploymentRepository_Expecter{mock: &_m.Mock}
}

// Deploy provides a mock function with given fields: ctx, resourceID, version
func (_m *DeploymentRepository) Deploy(ctx context.Context, resourceID string, version string) (*status.Status, error) {
	ret := _m.Called(ctx, resourceID, version)

	if len(ret) == 0 {
		panic("no return value specified for Deploy")
	}

	var r0 *status.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*status.Status, error)); ok {
		return rf(ctx, resourceID, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *status.Status); ok {
		r0 = rf(ctx, resourceID, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.Status)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, resourceID, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeploymentRepository_Deploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deploy'
type DeploymentRepository_Deploy_Call struct {
	*mock.Call
}

// Deploy is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceID string
//   - version string
func (_e *DeploymentRepository_Expecter) Deploy(ctx interface{}, resourceID interface{}, version interface{}) *DeploymentRepository_Deploy_Call {
	return &DeploymentRepository_Deploy_Call{Call: _e.mock.On("Deploy", ctx, resourceID, version)}
}

func (_c *DeploymentRepository_Deploy_Call) Run(run func(ctx context.Context, resourceID string, version string)) *DeploymentRepository_Deploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DeploymentRepository_Deploy_Call) Return(_a0 *status.Status, _a1 error) *DeploymentRepository_Deploy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeploymentRepository_Deploy_Call) RunAndReturn(run func(context.Context, string, string) (*status.Status, error)) *DeploymentRepository_Deploy_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with given fields: ctx, resourceID
func (_m *DeploymentRepository) GetStatus(ctx context.Context, resourceID string) (*status.Status, error) {
	ret := _m.Called(ctx, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 *status.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*status.Status, error)); ok {
		return rf(ctx, resourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *status.Status); ok {
		r0 = rf(ctx, resourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.Status)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeploymentRepository_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type DeploymentRepository_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceID string
func (_e *DeploymentRepository_Expecter) GetStatus(ctx interface{}, resourceID interface{}) *DeploymentRepository_GetStatus_Call {
	return &DeploymentRepository_GetStatus_Call{Call: _e.mock.On("GetStatus", ctx, resourceID)}
}

func (_c *DeploymentRepository_GetStatus_Call) Run(run func(ctx context.Context, resourceID string)) *DeploymentRepository_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DeploymentRepository_GetStatus_Call) Return(_a0 *status.Status, _a1 error) *DeploymentRepository_GetStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeploymentRepository_GetStatus_Call) RunAndReturn(run func(context.Context, string) (*status.Status, error)) *DeploymentRepository_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Redeploy provides a mock function with given fields: ctx, resourceID
func (_m *DeploymentRepository) Redeploy(ctx context.Context, resourceID string) (*status.Status, error) {
	ret := _m.Called(ctx, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for Redeploy")
	}

	var r0 *status.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*status.Status, error)); ok {
		return rf(ctx, resourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *status.Status); ok {
		r0 = rf(ctx, resourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.Status)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeploymentRepository_Redeploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redeploy'
type DeploymentRepository_Redeploy_Call struct {
	*mock.Call
}

// Redeploy is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceID string
func (_e *DeploymentRepository_Expecter) Redeploy(ctx interface{}, resourceID interface{}) *DeploymentRepository_Redeploy_Call {
	return &DeploymentRepository_Redeploy_Call{Call: _e.mock.On("Redeploy", ctx, resourceID)}
}

func (_c *DeploymentRepository_Redeploy_Call) Run(run func(ctx context.Context, resourceID string)) *DeploymentRepository_Redeploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DeploymentRepository_Redeploy_Call) Return(_a0 *status.Status, _a1 error) *DeploymentRepository_Redeploy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeploymentRepository_Redeploy_Call) RunAndReturn(run func(context.Context, string) (*status.Status, error)) *DeploymentRepository_Redeploy_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx, resourceID
func (_m *DeploymentRepository) Stop(ctx context.Context, resourceID string) (*status.Status, error) {
	ret := _m.Called(ctx, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 *status.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*status.Status, error)); ok {
		return rf(ctx, resourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *status.Status); ok {
		r0 = rf(ctx, resourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.Status)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeploymentRepository_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type DeploymentRepository_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceID string
func (_e *DeploymentRepository_Expecter) Stop(ctx interface{}, resourceID interface{}) *DeploymentRepository_Stop_Call {
	return &DeploymentRepository_Stop_Call{Call: _e.mock.On("Stop", ctx, resourceID)}
}

func (_c *DeploymentRepository_Stop_Call) Run(run func(ctx context.Context, resourceID string)) *DeploymentRepository_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DeploymentRepository_Stop_Call) Return(_a0 *status.Status, _a1 error) *DeploymentRepository_Stop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeploymentRepository_Stop_Call) RunAndReturn(run func(context.Context, string) (*status.Status, error)) *DeploymentRepository_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeploymentRepository creates a new instance of DeploymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeploymentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeploymentRepository {
	mock := &DeploymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
