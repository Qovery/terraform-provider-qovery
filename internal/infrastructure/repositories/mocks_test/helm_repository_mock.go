// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks_test

import (
	context "context"

	helm "github.com/qovery/terraform-provider-qovery/internal/domain/helm"
	mock "github.com/stretchr/testify/mock"
)

// HelmRepository is an autogenerated mock type for the Repository type
type HelmRepository struct {
	mock.Mock
}

type HelmRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *HelmRepository) EXPECT() *HelmRepository_Expecter {
	return &HelmRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, environmentID, request
func (_m *HelmRepository) Create(ctx context.Context, environmentID string, request helm.UpsertRepositoryRequest) (*helm.Helm, error) {
	ret := _m.Called(ctx, environmentID, request)

	var r0 *helm.Helm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, helm.UpsertRepositoryRequest) (*helm.Helm, error)); ok {
		return rf(ctx, environmentID, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, helm.UpsertRepositoryRequest) *helm.Helm); ok {
		r0 = rf(ctx, environmentID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helm.Helm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, helm.UpsertRepositoryRequest) error); ok {
		r1 = rf(ctx, environmentID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HelmRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type HelmRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - environmentID string
//   - request helm.UpsertRepositoryRequest
func (_e *HelmRepository_Expecter) Create(ctx interface{}, environmentID interface{}, request interface{}) *HelmRepository_Create_Call {
	return &HelmRepository_Create_Call{Call: _e.mock.On("Create", ctx, environmentID, request)}
}

func (_c *HelmRepository_Create_Call) Run(run func(ctx context.Context, environmentID string, request helm.UpsertRepositoryRequest)) *HelmRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(helm.UpsertRepositoryRequest))
	})
	return _c
}

func (_c *HelmRepository_Create_Call) Return(_a0 *helm.Helm, _a1 error) *HelmRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HelmRepository_Create_Call) RunAndReturn(run func(context.Context, string, helm.UpsertRepositoryRequest) (*helm.Helm, error)) *HelmRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, helmID
func (_m *HelmRepository) Delete(ctx context.Context, helmID string) error {
	ret := _m.Called(ctx, helmID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, helmID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HelmRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type HelmRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - helmID string
func (_e *HelmRepository_Expecter) Delete(ctx interface{}, helmID interface{}) *HelmRepository_Delete_Call {
	return &HelmRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, helmID)}
}

func (_c *HelmRepository_Delete_Call) Run(run func(ctx context.Context, helmID string)) *HelmRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *HelmRepository_Delete_Call) Return(_a0 error) *HelmRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HelmRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *HelmRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, helmID, advancedSettingsJsonFromState, isTriggeredFromImport
func (_m *HelmRepository) Get(ctx context.Context, helmID string, advancedSettingsJsonFromState string, isTriggeredFromImport bool) (*helm.Helm, error) {
	ret := _m.Called(ctx, helmID, advancedSettingsJsonFromState, isTriggeredFromImport)

	var r0 *helm.Helm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) (*helm.Helm, error)); ok {
		return rf(ctx, helmID, advancedSettingsJsonFromState, isTriggeredFromImport)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) *helm.Helm); ok {
		r0 = rf(ctx, helmID, advancedSettingsJsonFromState, isTriggeredFromImport)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helm.Helm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = rf(ctx, helmID, advancedSettingsJsonFromState, isTriggeredFromImport)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HelmRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type HelmRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - helmID string
//   - advancedSettingsJsonFromState string
//   - isTriggeredFromImport bool
func (_e *HelmRepository_Expecter) Get(ctx interface{}, helmID interface{}, advancedSettingsJsonFromState interface{}, isTriggeredFromImport interface{}) *HelmRepository_Get_Call {
	return &HelmRepository_Get_Call{Call: _e.mock.On("Get", ctx, helmID, advancedSettingsJsonFromState, isTriggeredFromImport)}
}

func (_c *HelmRepository_Get_Call) Run(run func(ctx context.Context, helmID string, advancedSettingsJsonFromState string, isTriggeredFromImport bool)) *HelmRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *HelmRepository_Get_Call) Return(_a0 *helm.Helm, _a1 error) *HelmRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HelmRepository_Get_Call) RunAndReturn(run func(context.Context, string, string, bool) (*helm.Helm, error)) *HelmRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, helmID, request
func (_m *HelmRepository) Update(ctx context.Context, helmID string, request helm.UpsertRepositoryRequest) (*helm.Helm, error) {
	ret := _m.Called(ctx, helmID, request)

	var r0 *helm.Helm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, helm.UpsertRepositoryRequest) (*helm.Helm, error)); ok {
		return rf(ctx, helmID, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, helm.UpsertRepositoryRequest) *helm.Helm); ok {
		r0 = rf(ctx, helmID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helm.Helm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, helm.UpsertRepositoryRequest) error); ok {
		r1 = rf(ctx, helmID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HelmRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type HelmRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - helmID string
//   - request helm.UpsertRepositoryRequest
func (_e *HelmRepository_Expecter) Update(ctx interface{}, helmID interface{}, request interface{}) *HelmRepository_Update_Call {
	return &HelmRepository_Update_Call{Call: _e.mock.On("Update", ctx, helmID, request)}
}

func (_c *HelmRepository_Update_Call) Run(run func(ctx context.Context, helmID string, request helm.UpsertRepositoryRequest)) *HelmRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(helm.UpsertRepositoryRequest))
	})
	return _c
}

func (_c *HelmRepository_Update_Call) Return(_a0 *helm.Helm, _a1 error) *HelmRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HelmRepository_Update_Call) RunAndReturn(run func(context.Context, string, helm.UpsertRepositoryRequest) (*helm.Helm, error)) *HelmRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewHelmRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewHelmRepository creates a new instance of HelmRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHelmRepository(t mockConstructorTestingTNewHelmRepository) *HelmRepository {
	mock := &HelmRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
