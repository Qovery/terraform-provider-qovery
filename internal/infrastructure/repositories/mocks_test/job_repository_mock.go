// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks_test

import (
	context "context"

	job "github.com/qovery/terraform-provider-qovery/internal/domain/job"
	mock "github.com/stretchr/testify/mock"
)

// JobRepository is an autogenerated mock type for the Repository type
type JobRepository struct {
	mock.Mock
}

type JobRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *JobRepository) EXPECT() *JobRepository_Expecter {
	return &JobRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, environmentID, request
func (_m *JobRepository) Create(ctx context.Context, environmentID string, request job.UpsertRepositoryRequest) (*job.Job, error) {
	ret := _m.Called(ctx, environmentID, request)

	var r0 *job.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, job.UpsertRepositoryRequest) (*job.Job, error)); ok {
		return rf(ctx, environmentID, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, job.UpsertRepositoryRequest) *job.Job); ok {
		r0 = rf(ctx, environmentID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, job.UpsertRepositoryRequest) error); ok {
		r1 = rf(ctx, environmentID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type JobRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - environmentID string
//   - request job.UpsertRepositoryRequest
func (_e *JobRepository_Expecter) Create(ctx interface{}, environmentID interface{}, request interface{}) *JobRepository_Create_Call {
	return &JobRepository_Create_Call{Call: _e.mock.On("Create", ctx, environmentID, request)}
}

func (_c *JobRepository_Create_Call) Run(run func(ctx context.Context, environmentID string, request job.UpsertRepositoryRequest)) *JobRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(job.UpsertRepositoryRequest))
	})
	return _c
}

func (_c *JobRepository_Create_Call) Return(_a0 *job.Job, _a1 error) *JobRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JobRepository_Create_Call) RunAndReturn(run func(context.Context, string, job.UpsertRepositoryRequest) (*job.Job, error)) *JobRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, jobID
func (_m *JobRepository) Delete(ctx context.Context, jobID string) error {
	ret := _m.Called(ctx, jobID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type JobRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID string
func (_e *JobRepository_Expecter) Delete(ctx interface{}, jobID interface{}) *JobRepository_Delete_Call {
	return &JobRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, jobID)}
}

func (_c *JobRepository_Delete_Call) Run(run func(ctx context.Context, jobID string)) *JobRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *JobRepository_Delete_Call) Return(_a0 error) *JobRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JobRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *JobRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, jobID
func (_m *JobRepository) Get(ctx context.Context, jobID string) (*job.Job, error) {
	ret := _m.Called(ctx, jobID)

	var r0 *job.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*job.Job, error)); ok {
		return rf(ctx, jobID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *job.Job); ok {
		r0 = rf(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type JobRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID string
func (_e *JobRepository_Expecter) Get(ctx interface{}, jobID interface{}) *JobRepository_Get_Call {
	return &JobRepository_Get_Call{Call: _e.mock.On("Get", ctx, jobID)}
}

func (_c *JobRepository_Get_Call) Run(run func(ctx context.Context, jobID string)) *JobRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *JobRepository_Get_Call) Return(_a0 *job.Job, _a1 error) *JobRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JobRepository_Get_Call) RunAndReturn(run func(context.Context, string) (*job.Job, error)) *JobRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, jobID, request
func (_m *JobRepository) Update(ctx context.Context, jobID string, request job.UpsertRepositoryRequest) (*job.Job, error) {
	ret := _m.Called(ctx, jobID, request)

	var r0 *job.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, job.UpsertRepositoryRequest) (*job.Job, error)); ok {
		return rf(ctx, jobID, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, job.UpsertRepositoryRequest) *job.Job); ok {
		r0 = rf(ctx, jobID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, job.UpsertRepositoryRequest) error); ok {
		r1 = rf(ctx, jobID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type JobRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID string
//   - request job.UpsertRepositoryRequest
func (_e *JobRepository_Expecter) Update(ctx interface{}, jobID interface{}, request interface{}) *JobRepository_Update_Call {
	return &JobRepository_Update_Call{Call: _e.mock.On("Update", ctx, jobID, request)}
}

func (_c *JobRepository_Update_Call) Run(run func(ctx context.Context, jobID string, request job.UpsertRepositoryRequest)) *JobRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(job.UpsertRepositoryRequest))
	})
	return _c
}

func (_c *JobRepository_Update_Call) Return(_a0 *job.Job, _a1 error) *JobRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JobRepository_Update_Call) RunAndReturn(run func(context.Context, string, job.UpsertRepositoryRequest) (*job.Job, error)) *JobRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewJobRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewJobRepository creates a new instance of JobRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJobRepository(t mockConstructorTestingTNewJobRepository) *JobRepository {
	mock := &JobRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
