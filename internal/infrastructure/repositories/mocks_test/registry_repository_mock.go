// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks_test

import (
	context "context"

	registry "github.com/qovery/terraform-provider-qovery/internal/domain/registry"
	mock "github.com/stretchr/testify/mock"
)

// RegistryRepository is an autogenerated mock type for the Repository type
type RegistryRepository struct {
	mock.Mock
}

type RegistryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *RegistryRepository) EXPECT() *RegistryRepository_Expecter {
	return &RegistryRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, organizationID, request
func (_m *RegistryRepository) Create(ctx context.Context, organizationID string, request registry.UpsertRequest) (*registry.Registry, error) {
	ret := _m.Called(ctx, organizationID, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *registry.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, registry.UpsertRequest) (*registry.Registry, error)); ok {
		return rf(ctx, organizationID, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, registry.UpsertRequest) *registry.Registry); ok {
		r0 = rf(ctx, organizationID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registry.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, registry.UpsertRequest) error); ok {
		r1 = rf(ctx, organizationID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RegistryRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationID string
//   - request registry.UpsertRequest
func (_e *RegistryRepository_Expecter) Create(ctx interface{}, organizationID interface{}, request interface{}) *RegistryRepository_Create_Call {
	return &RegistryRepository_Create_Call{Call: _e.mock.On("Create", ctx, organizationID, request)}
}

func (_c *RegistryRepository_Create_Call) Run(run func(ctx context.Context, organizationID string, request registry.UpsertRequest)) *RegistryRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(registry.UpsertRequest))
	})
	return _c
}

func (_c *RegistryRepository_Create_Call) Return(_a0 *registry.Registry, _a1 error) *RegistryRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RegistryRepository_Create_Call) RunAndReturn(run func(context.Context, string, registry.UpsertRequest) (*registry.Registry, error)) *RegistryRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, organizationID, registryID
func (_m *RegistryRepository) Delete(ctx context.Context, organizationID string, registryID string) error {
	ret := _m.Called(ctx, organizationID, registryID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, organizationID, registryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistryRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RegistryRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationID string
//   - registryID string
func (_e *RegistryRepository_Expecter) Delete(ctx interface{}, organizationID interface{}, registryID interface{}) *RegistryRepository_Delete_Call {
	return &RegistryRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, organizationID, registryID)}
}

func (_c *RegistryRepository_Delete_Call) Run(run func(ctx context.Context, organizationID string, registryID string)) *RegistryRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RegistryRepository_Delete_Call) Return(_a0 error) *RegistryRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RegistryRepository_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *RegistryRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, organizationID, registryID
func (_m *RegistryRepository) Get(ctx context.Context, organizationID string, registryID string) (*registry.Registry, error) {
	ret := _m.Called(ctx, organizationID, registryID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *registry.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*registry.Registry, error)); ok {
		return rf(ctx, organizationID, registryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *registry.Registry); ok {
		r0 = rf(ctx, organizationID, registryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registry.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, organizationID, registryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RegistryRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationID string
//   - registryID string
func (_e *RegistryRepository_Expecter) Get(ctx interface{}, organizationID interface{}, registryID interface{}) *RegistryRepository_Get_Call {
	return &RegistryRepository_Get_Call{Call: _e.mock.On("Get", ctx, organizationID, registryID)}
}

func (_c *RegistryRepository_Get_Call) Run(run func(ctx context.Context, organizationID string, registryID string)) *RegistryRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RegistryRepository_Get_Call) Return(_a0 *registry.Registry, _a1 error) *RegistryRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RegistryRepository_Get_Call) RunAndReturn(run func(context.Context, string, string) (*registry.Registry, error)) *RegistryRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, organizationID, registryID, request
func (_m *RegistryRepository) Update(ctx context.Context, organizationID string, registryID string, request registry.UpsertRequest) (*registry.Registry, error) {
	ret := _m.Called(ctx, organizationID, registryID, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *registry.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, registry.UpsertRequest) (*registry.Registry, error)); ok {
		return rf(ctx, organizationID, registryID, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, registry.UpsertRequest) *registry.Registry); ok {
		r0 = rf(ctx, organizationID, registryID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registry.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, registry.UpsertRequest) error); ok {
		r1 = rf(ctx, organizationID, registryID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RegistryRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationID string
//   - registryID string
//   - request registry.UpsertRequest
func (_e *RegistryRepository_Expecter) Update(ctx interface{}, organizationID interface{}, registryID interface{}, request interface{}) *RegistryRepository_Update_Call {
	return &RegistryRepository_Update_Call{Call: _e.mock.On("Update", ctx, organizationID, registryID, request)}
}

func (_c *RegistryRepository_Update_Call) Run(run func(ctx context.Context, organizationID string, registryID string, request registry.UpsertRequest)) *RegistryRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(registry.UpsertRequest))
	})
	return _c
}

func (_c *RegistryRepository_Update_Call) Return(_a0 *registry.Registry, _a1 error) *RegistryRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RegistryRepository_Update_Call) RunAndReturn(run func(context.Context, string, string, registry.UpsertRequest) (*registry.Registry, error)) *RegistryRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRegistryRepository creates a new instance of RegistryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegistryRepository {
	mock := &RegistryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
