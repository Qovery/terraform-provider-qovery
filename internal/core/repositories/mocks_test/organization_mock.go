// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks_test

import (
	context "context"

	organization "github.com/qovery/terraform-provider-qovery/internal/domain/organization"
	mock "github.com/stretchr/testify/mock"
)

// OrganizationRepository is an autogenerated mock type for the Repository type
type OrganizationRepository struct {
	mock.Mock
}

type OrganizationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrganizationRepository) EXPECT() *OrganizationRepository_Expecter {
	return &OrganizationRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, organizationID
func (_m *OrganizationRepository) Get(ctx context.Context, organizationID string) (*organization.Organization, error) {
	ret := _m.Called(ctx, organizationID)

	var r0 *organization.Organization
	if rf, ok := ret.Get(0).(func(context.Context, string) *organization.Organization); ok {
		r0 = rf(ctx, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type OrganizationRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - organizationID string
func (_e *OrganizationRepository_Expecter) Get(ctx interface{}, organizationID interface{}) *OrganizationRepository_Get_Call {
	return &OrganizationRepository_Get_Call{Call: _e.mock.On("Get", ctx, organizationID)}
}

func (_c *OrganizationRepository_Get_Call) Run(run func(ctx context.Context, organizationID string)) *OrganizationRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationRepository_Get_Call) Return(_a0 *organization.Organization, _a1 error) *OrganizationRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, organizationID, request
func (_m *OrganizationRepository) Update(ctx context.Context, organizationID string, request organization.UpdateRequest) (*organization.Organization, error) {
	ret := _m.Called(ctx, organizationID, request)

	var r0 *organization.Organization
	if rf, ok := ret.Get(0).(func(context.Context, string, organization.UpdateRequest) *organization.Organization); ok {
		r0 = rf(ctx, organizationID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, organization.UpdateRequest) error); ok {
		r1 = rf(ctx, organizationID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type OrganizationRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - organizationID string
//  - request organization.UpdateRequest
func (_e *OrganizationRepository_Expecter) Update(ctx interface{}, organizationID interface{}, request interface{}) *OrganizationRepository_Update_Call {
	return &OrganizationRepository_Update_Call{Call: _e.mock.On("Update", ctx, organizationID, request)}
}

func (_c *OrganizationRepository_Update_Call) Run(run func(ctx context.Context, organizationID string, request organization.UpdateRequest)) *OrganizationRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(organization.UpdateRequest))
	})
	return _c
}

func (_c *OrganizationRepository_Update_Call) Return(_a0 *organization.Organization, _a1 error) *OrganizationRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewOrganizationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrganizationRepository creates a new instance of OrganizationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrganizationRepository(t mockConstructorTestingTNewOrganizationRepository) *OrganizationRepository {
	mock := &OrganizationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
