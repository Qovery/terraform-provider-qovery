// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks_test

import (
	context "context"

	variable "github.com/qovery/terraform-provider-qovery/internal/domain/variable"
	mock "github.com/stretchr/testify/mock"
)

// VariableService is an autogenerated mock type for the Service type
type VariableService struct {
	mock.Mock
}

type VariableService_Expecter struct {
	mock *mock.Mock
}

func (_m *VariableService) EXPECT() *VariableService_Expecter {
	return &VariableService_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: ctx, scopeResourceID
func (_m *VariableService) List(ctx context.Context, scopeResourceID string) (variable.Variables, error) {
	ret := _m.Called(ctx, scopeResourceID)

	var r0 variable.Variables
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (variable.Variables, error)); ok {
		return rf(ctx, scopeResourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) variable.Variables); ok {
		r0 = rf(ctx, scopeResourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(variable.Variables)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, scopeResourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VariableService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type VariableService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - scopeResourceID string
func (_e *VariableService_Expecter) List(ctx interface{}, scopeResourceID interface{}) *VariableService_List_Call {
	return &VariableService_List_Call{Call: _e.mock.On("List", ctx, scopeResourceID)}
}

func (_c *VariableService_List_Call) Run(run func(ctx context.Context, scopeResourceID string)) *VariableService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *VariableService_List_Call) Return(_a0 variable.Variables, _a1 error) *VariableService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VariableService_List_Call) RunAndReturn(run func(context.Context, string) (variable.Variables, error)) *VariableService_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, scopeResourceID, request
func (_m *VariableService) Update(ctx context.Context, scopeResourceID string, request variable.DiffRequest) (variable.Variables, error) {
	ret := _m.Called(ctx, scopeResourceID, request)

	var r0 variable.Variables
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, variable.DiffRequest) (variable.Variables, error)); ok {
		return rf(ctx, scopeResourceID, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, variable.DiffRequest) variable.Variables); ok {
		r0 = rf(ctx, scopeResourceID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(variable.Variables)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, variable.DiffRequest) error); ok {
		r1 = rf(ctx, scopeResourceID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VariableService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type VariableService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - scopeResourceID string
//   - request variable.DiffRequest
func (_e *VariableService_Expecter) Update(ctx interface{}, scopeResourceID interface{}, request interface{}) *VariableService_Update_Call {
	return &VariableService_Update_Call{Call: _e.mock.On("Update", ctx, scopeResourceID, request)}
}

func (_c *VariableService_Update_Call) Run(run func(ctx context.Context, scopeResourceID string, request variable.DiffRequest)) *VariableService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(variable.DiffRequest))
	})
	return _c
}

func (_c *VariableService_Update_Call) Return(_a0 variable.Variables, _a1 error) *VariableService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VariableService_Update_Call) RunAndReturn(run func(context.Context, string, variable.DiffRequest) (variable.Variables, error)) *VariableService_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewVariableService interface {
	mock.TestingT
	Cleanup(func())
}

// NewVariableService creates a new instance of VariableService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVariableService(t mockConstructorTestingTNewVariableService) *VariableService {
	mock := &VariableService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
